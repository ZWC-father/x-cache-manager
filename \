#include "logger.h"
#include <atomic>
#include <exception>
#include <memory>
#include <spdlog/logger.h>
#include <spdlog/sinks/rotating_file_sink.h>
#include <spdlog/sinks/stdout_color_sinks.h>


void Logger::set_logger(int type, int action, const std::string& file,
                        size_t rotating_size, size_t rotating_nums){
    try{
        if(type & LOG_MODE_STDOUT){
            if(action & LOG_ACTION_INIT){
                if(logger_stdout == nullptr){
                    if(sink_stdout == nullptr){
                        sink_stdout = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
                        sink_stdout->set_color(spdlog::level::debug, "\033[32m");
                        sink_stdout->set_color(spdlog::level::info,  "\033[37m");
                        sink_stdout->set_color(spdlog::level::warn,  "\033[33m");
                        sink_stdout->set_color(spdlog::level::err,   "\033[31m");
                        sink_stdout->set_color(spdlog::level::critical, "\033[35m");
                    }
                    
                    logger_stdout = std::make_unique<spdlog::logger>("logger_stdout", sink_stdout);
                    logger_stdout->set_error_handler([](const std::string& msg){
                          throw LoggerError("[*** Logger {STDOUT} Error ***] " + msg);
                    });

                }
            }
            if(action & LOG_ACTION_ENABLE){
                if(logger_stdout != nullptr){
                    logger_mode.fetch_or(LOG_MODE_STDOUT, std::memory_order_acq_rel);
                }
            }
            if(action & LOG_ACTION_DISABLE){
                logger_mode.fetch_and(LOG_MODE_STDERR | LOG_MODE_FILES, std::memory_order_acq_rel);
            }
        }

        if(type & LOG_MODE_STDERR){
            if(action & LOG_ACTION_INIT){
                if(logger_stderr == nullptr){
                    if(sink_stderr == nullptr){
                        sink_stderr = std::make_shared<spdlog::sinks::stderr_color_sink_mt>();
                        sink_stderr->set_color(spdlog::level::warn,  "\033[33m");
                        sink_stderr->set_color(spdlog::level::err,   "\033[31m");
                        sink_stderr->set_color(spdlog::level::critical, "\033[35m");
                    }
                    logger_stderr = std::make_unique<spdlog::logger>("logger_stderr", sink_stderr);
                    logger_stderr->set_error_handler([](const std::string& msg){
                          throw LoggerError("[*** Logger {STDERR} Error ***] " + msg);
                    });
                }
            }

            if(action & LOG_ACTION_ENABLE){
                if(logger_stderr != nullptr){
                    logger_mode.fetch_or(LOG_MODE_STDERR, std::memory_order_acq_rel);
                }
            }

            if(action & LOG_ACTION_DISABLE){
                logger_mode.fetch_and(LOG_MODE_STDOUT | LOG_MODE_FILES, std::memory_order_acq_rel);
            }

        }

        if(type & LOG_MODE_FILES){
            if(action == LOG_ACTION_INIT){
                if(logger_files == nullptr){
                    if(sink_files == nullptr){
                        sink_files = std::make_shared<spdlog::sinks::rotating_file_sink_mt>
                                     (file, rotating_size, rotating_nums);
                    }
                    
                    logger_files = std::make_unique<spdlog::logger>("logger_files", sink_files);
                    logger_files->set_error_handler([](const std::string& msg){
                          throw LoggerError("[*** Logger {FILES} Error ***] " + msg);
                    });
                }
            }

            if(action & LOG_ACTION_ENABLE){
                if(logger_files != nullptr){
                    logger_mode.fetch_or(LOG_MODE_FILES, std::memory_order_acq_rel);
                }
            }

            if(action & LOG_ACTION_DISABLE){
                logger_mode.fetch_and(LOG_MODE_STDOUT | LOG_MODE_STDERR, std::memory_order_acq_rel);
            }
        }

    }catch(const std::exception& e){
        throw LoggerError(std::string("[*** Logger Setup Error ***] ") + e.what());
    }

}


